(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{493:function(v,_,t){"use strict";t.r(_);var r=t(14),e=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"现代浏览器的渲染过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#现代浏览器的渲染过程"}},[v._v("#")]),v._v(" 现代浏览器的渲染过程")]),v._v(" "),t("ul",[t("li",[v._v("浏览器进化过程")]),v._v(" "),t("li",[v._v("现代浏览器的特征与结构")]),v._v(" "),t("li",[v._v("Chrome浏览器架构")]),v._v(" "),t("li",[v._v("Chrome浏览器的渲染过程")]),v._v(" "),t("li",[v._v("初探Webkit")])]),v._v(" "),t("h2",{attrs:{id:"现代浏览器的进化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#现代浏览器的进化"}},[v._v("#")]),v._v(" 现代浏览器的进化")]),v._v(" "),t("p",[v._v("1990年，蒂姆·伯纳斯·李开发了第一个网页浏览器WorldWideWeb，后改名为Nexus。WorldWideWeb浏览器支持早期的HTML标记 语言，功能比较简单，只能支持文本、简单的样式表、电影、声音、图片等资源的显示。")]),v._v(" "),t("p",[v._v("1993年，马克·安德森领导的团开发了一个真正有影响力的浏览器Mosaic，这就是后来世界上最流行的浏览器Netscape Navigator。")]),v._v(" "),t("p",[v._v("1995年，微软推出了闻名于世的浏览器Internet Explorer。"),t("strong",[v._v("第一次浏览器大战开始，持续两年")])]),v._v(" "),t("p",[v._v("1998年，Netscape公司开放Netscape Navigator源代码，成立了Mozilla基金会。"),t("strong",[v._v("第二次浏览器大战开始，持续八年")])]),v._v(" "),t("p",[v._v("2003年，苹果公司发布了Safari浏览器。")]),v._v(" "),t("p",[v._v("2004年，Netscape公司发布了著名的开源浏览器Mozilla Firefox。")]),v._v(" "),t("p",[v._v("2005年，苹果公司开源了浏览器中的核心代码，基于此发起了一个新的开源项目WebKit(Safari浏览器的内核)。")]),v._v(" "),t("p",[v._v("2008年， Google公司已WebKit为内核，创建了一个新的浏览器项目Chromium。以Chromium为基础，谷歌发布了Chrome浏览器。 至于这两者的关系，可以简单地理解为:Chromium为实验版，具有众多新特性;Chrome为稳定版。")]),v._v(" "),t("h2",{attrs:{id:"现代浏览器的特征与结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#现代浏览器的特征与结构"}},[v._v("#")]),v._v(" 现代浏览器的特征与结构")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("特征")]),v._v(" "),t("p",[t("code",[v._v("网络")]),v._v(" "),t("code",[v._v("资源管理")]),v._v(" "),t("code",[v._v("网页浏览")]),v._v(" "),t("code",[v._v("多页面管理")]),v._v(" "),t("code",[v._v("插件和扩展")]),v._v(" "),t("code",[v._v("账户和同步")]),v._v(" "),t("code",[v._v("安全机制")]),v._v(" "),t("code",[v._v("开发者工具")])])]),v._v(" "),t("li",[t("p",[v._v("结构\n由8个子系统构成。\n"),t("img",{attrs:{src:"/browser-structure.png"}})]),v._v(" "),t("p",[v._v("User Interface: 用户界面"),t("br"),v._v("\nBrowser Engine: 浏览器引擎"),t("br"),v._v("\nRendering Engine: 渲染引擎"),t("br"),v._v("\nNetworking: 网络"),t("br"),v._v("\nXML Parser: XML解析器"),t("br"),v._v("\nDisplay Backend: 显示后端"),t("br"),v._v("\nData Persistence: 数据持久层")])])]),v._v(" "),t("h2",{attrs:{id:"常见的渲染引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的渲染引擎"}},[v._v("#")]),v._v(" 常见的渲染引擎")]),v._v(" "),t("ul",[t("li",[v._v("渲染引擎：能够能够将HTML/CSS/JavaScript文本及相应的资源文件转换成图像结果。")]),v._v(" "),t("li",[v._v("渲染引擎的种类：")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("渲染引擎")]),v._v(" "),t("th",[v._v("浏览器")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("Trident")]),v._v(" "),t("td",[v._v("IE、Edge（旧）")])]),v._v(" "),t("tr",[t("td",[v._v("Gecko")]),v._v(" "),t("td",[v._v("Firefox")])]),v._v(" "),t("tr",[t("td",[v._v("WebKit")]),v._v(" "),t("td",[v._v("Safari")])]),v._v(" "),t("tr",[t("td",[v._v("Blink(WebKit fork)")]),v._v(" "),t("td",[v._v("Chromium/Chrome，Opera，Edge(新)")])])])]),v._v(" "),t("h2",{attrs:{id:"渲染引擎的结构与工作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染引擎的结构与工作流程"}},[v._v("#")]),v._v(" 渲染引擎的结构与工作流程")]),v._v(" "),t("p",[v._v("数据流：\n控制流：")]),v._v(" "),t("p",[t("img",{attrs:{src:"/browser-workflow.png",alt:"浏览器渲染引擎工作原理"}})]),v._v(" "),t("p",[t("code",[v._v("解析HTML构造DOM树")]),v._v(" -> "),t("code",[v._v("构造渲染树")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("EN")]),v._v(" "),t("th",[v._v("ZN")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("HTML Parser")]),v._v(" "),t("td",[v._v("HTML解析器")])]),v._v(" "),t("tr",[t("td",[v._v("CSS Parser")]),v._v(" "),t("td",[v._v("CSS解析器")])]),v._v(" "),t("tr",[t("td",[v._v("Javascript Interperter")]),v._v(" "),t("td",[v._v("javascript 解释器")])]),v._v(" "),t("tr",[t("td",[v._v("DOM Tree")]),v._v(" "),t("td",[v._v("DOM树 🌲🌲🌲🌲🌲")])]),v._v(" "),t("tr",[t("td",[v._v("Render Tree")]),v._v(" "),t("td",[v._v("渲染树 🌲🌲🌲🌲🌲")])]),v._v(" "),t("tr",[t("td",[v._v("Layout of Render Tree")]),v._v(" "),t("td",[v._v("渲染树 🌲布局")])])])]),v._v(" "),t("h4",{attrs:{id:"解析html构造dom树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析html构造dom树"}},[v._v("#")]),v._v(" 解析HTML构造DOM树")]),v._v(" "),t("p",[v._v("解析CSS会产生CSS规则树，解析javascript主要是通过DOM API和CSSOM API来操作DOM Tree和CSS")]),v._v(" "),t("h4",{attrs:{id:"构造渲染树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造渲染树"}},[v._v("#")]),v._v(" 构造渲染树")]),v._v(" "),t("p",[v._v("通过DOM树和CSS规则树来构造渲染树。不过，渲染树 并不等同于DOM树，因为一些像Header或display:none的东西就没必要放在渲染树中了。CSS规则树主要是为了完成匹配并把CSS规则附加到渲染树上的每个Element。也就是DOM结点")]),v._v(" "),t("h4",{attrs:{id:"渲染树布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染树布局"}},[v._v("#")]),v._v(" 渲染树布局")]),v._v(" "),t("p",[v._v("计算每个节点的确切的显示位置，并把布局信息放到渲染树中。也就是layout和reflow的过程。")]),v._v(" "),t("h4",{attrs:{id:"绘制渲染树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绘制渲染树"}},[v._v("#")]),v._v(" 绘制渲染树")]),v._v(" "),t("p",[v._v("通过调用操作系统Native GUI的API绘制将每一个节点绘制出来。")]),v._v(" "),t("h2",{attrs:{id:"chrome-架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chrome-架构"}},[v._v("#")]),v._v(" Chrome 架构")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("Browser:控制程序的“chrome”部分，包括地 址栏，书签，后退和前进按钮。还处理Web浏 览器的不可见的，和特权部分，例如网络请求 和文件访问。")])]),v._v(" "),t("li",[t("p",[v._v("Renderer:负责显示网站的选项卡内的所有内 容。")])]),v._v(" "),t("li",[t("p",[v._v("Plugin:控制网站使用的所有插件，例如 flash。")])]),v._v(" "),t("li",[t("p",[v._v("GPU:独立于其他进程的GPU处理任务。 它被 分成多个不同的进程，因为GPU处理来自多个 程序的请求并将它们绘制在同一个面中。")])])]),v._v(" "),t("p",[v._v("请看流程图：")]),v._v(" "),t("img",{attrs:{src:"/chrome-framework.png"}}),v._v(" "),t("h3",{attrs:{id:"chrome-渲染器进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chrome-渲染器进程"}},[v._v("#")]),v._v(" Chrome 渲染器进程")]),v._v(" "),t("ul",[t("li",[v._v("渲染器进程负责选项卡内发生的所有事情。 在 渲染器进程中，主线程处理你为用户编写的大 部分代码。")]),v._v(" "),t("li",[v._v("如果你使用了web worker 或 service worker， 有时JavaScript代码的一部分将由工作线程处 理。 排版和栅格线程也在渲染器进程内运行， 以便高效、流畅地呈现页面。")])]),v._v(" "),t("h3",{attrs:{id:"chrome-渲染过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chrome-渲染过程"}},[v._v("#")]),v._v(" Chrome 渲染过程")]),v._v(" "),t("h4",{attrs:{id:"解析部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析部分"}},[v._v("#")]),v._v(" 解析部分")]),v._v(" "),t("ul",[t("li",[v._v("构建DOM Tree\n"),t("ul",[t("li",[v._v("逐行扫描文本，一边扫描一边生成DOM，如果扫描到脚本的时候，生成DOM Tree的过程会暂停。（javascript 可以阻止解析）")])])]),v._v(" "),t("li",[v._v("子资源加载\n"),t("ul",[t("li",[v._v("进行DOM渲染的过程当中，如果文档中有引用的资源例如 脚本 css 图片等，会同时向网络发送请求。我们称之为子资源加载")])])]),v._v(" "),t("li",[v._v("提示浏览器如何加载资源")]),v._v(" "),t("li",[v._v("样式表计算并生成渲染树\n"),t("ul",[t("li",[v._v("把样式表中定义的样式与DOM中的元素节点做关联，这个过程就叫计算样式表。样式表计算完成之后就生成了渲染树")])])]),v._v(" "),t("li",[v._v("布局\n"),t("ul",[t("li",[v._v("根据渲染树中样式的描述规则，生成布局")])])]),v._v(" "),t("li",[v._v("绘制\n"),t("ul",[t("li",[v._v("进行合成")])])])]),v._v(" "),t("h4",{attrs:{id:"合成部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合成部分"}},[v._v("#")]),v._v(" 合成部分")]),v._v(" "),t("p",[v._v("把文档的结构、元素的样式、几何形状和绘制顺序转换为屏幕上的像素称为光栅化。\n合成是一种将页面的各个部分分层，分别栅格化，并在一个被称为合成器线程的独立线程中合成为页面的技术。")]),v._v(" "),t("h4",{attrs:{id:"gpu渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gpu渲染"}},[v._v("#")]),v._v(" GPU渲染")]),v._v(" "),t("p",[v._v("一旦创建了层树并确定了绘制顺序，主线程就会将该信息提交给"),t("code",[v._v("合成器线程")]),v._v(" 合成器线程然后栅格化每个图层。一个图层可能像页面的整个长度一样大，因此合成器线程会将它们分成图块，并将每个图块发送到光栅线程。栅格线程栅格化每一个tile并将它们存储 在GPU内存中。")]),v._v(" "),t("p",[v._v("通过IPC将合成器帧提交给浏览器进程。这时可以从UI线程添加另一个合成器帧以用于浏览器UI更改，或者从其他渲染器进程添加扩充数据。这些合成器帧被发送到GPU用来在屏幕上显示。如果发 生滚动事件，合成器线程会创建另一个合成器帧并发送到GPU。")]),v._v(" "),t("p",[v._v("合成的好处是它可以在不涉及主线程的情况下完成。 合成线程不需要等待样式计算或 JavaScript 执行。这就是合成动画是平滑性能的最佳选择的原因。如果需要再次计算布局或绘图，则必须涉及主线程。")]),v._v(" "),t("h2",{attrs:{id:"初探webkit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初探webkit"}},[v._v("#")]),v._v(" 初探Webkit")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("WebKit 官网:https://webkit.org/")])]),v._v(" "),t("li",[t("p",[v._v("Blink 是未来")])]),v._v(" "),t("li",[t("p",[v._v("Blink官方文档:http://www.chromium.org/blink")])])])])}),[],!1,null,null,null);_.default=e.exports}}]);