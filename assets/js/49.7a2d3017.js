(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{478:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"解读控制反转-ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解读控制反转-ioc"}},[t._v("#")]),t._v(" 解读控制反转(IOC)")]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("随着前端承担的职责越来越重，前端应⽤向着复杂化、规模化的⽅向发展。⼤型项⽬模块化是一种趋势，不可避免模块之间要相互依赖，此外还有很多第三⽅方包。这样的话如何去管理这些繁杂的文件，是 ⼀个不可避免的话题。此时作为⼀种已经被实践证明过的思想模式⼀直得到大家的青睐，这就是控制反转(IOC)。")]),t._v(" "),s("h2",{attrs:{id:"ioc定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ioc定义"}},[t._v("#")]),t._v(" IOC定义")]),t._v(" "),s("p",[t._v("先看⼀下维基百科上的定义: 控制反转(Inversion of Control，缩写为IoC)，是⾯向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入(Dependency Injection，简称DI)，还有⼀种方式叫“依赖查找”(Dependency Lookup)。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说， 依赖被注⼊入到对象中。")]),t._v(" "),s("h2",{attrs:{id:"原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原则"}},[t._v("#")]),t._v(" 原则")]),t._v(" "),s("p",[s("code",[t._v("1")]),t._v(". 高层模块不应该依赖低层模块。两个都应该依赖抽象"),s("br"),t._v(" "),s("code",[t._v("2")]),t._v(". 抽象不应该依赖具体实现"),s("br"),t._v(" "),s("code",[t._v("3")]),t._v(". 面向接⼝编程，而非⾯向实现编程")]),t._v(" "),s("p",[t._v("针对前端来说，接口的概念不那么清晰明了了，不像强类型语⾔。 概念是比较枯燥的，下面结合例子来看 ⼀下可能更好理理解一点。")]),t._v(" "),s("h2",{attrs:{id:"目的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目的"}},[t._v("#")]),t._v(" ⽬的")]),t._v(" "),s("p",[t._v("根据概念可以看到最主要的目的就是降低耦合，提⾼扩展性。在深究之前，我们先看下代码耦合")]),t._v(" "),s("h3",{attrs:{id:"代码耦合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码耦合"}},[t._v("#")]),t._v(" 代码耦合")]),t._v(" "),s("p",[t._v("所谓代码耦合，如图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/blog/ioc-coupling.png",alt:"img"}})]),t._v(" "),s("p",[t._v("⽐较清晰明了，代码相互之间的联系太直接: 假如obj2报错，那么整个系统也都报错了。 所以我们的⽬的就是降低⼆者之间的耦合度， 结合图来说比较清晰， 如果两者不这么直接的发生关系，那么相互 影响的概率就小了很多。")]),t._v(" "),s("p",[t._v("另外，这是比较少的模块，常规项目里显然不仅仅是只有这么少，想象⼀下多个模块的场景:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/blog/ioc-mult-coupling.png",alt:"img"}})]),t._v(" "),s("p",[t._v("这⾥除了耦合之外，不同⻮轮之间的依赖关系也是个头疼的问题，迭代个几个版本之后发现，这是什么鬼，一动就有bug...")]),t._v(" "),s("p",[t._v("所以IOC就是来解决上述问题的。 其常⻅⽅式是依赖注入和依赖查找。在js领域里面最出名的就是angular中大量使用了依赖注入。⽂字⽐较苍白，我们可以通过例子来看看。")]),t._v(" "),s("h3",{attrs:{id:"实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),s("p",[t._v("就从NBA来说，有那么一些明星，我们想知道他们在什么球队，那么可能像下面这样：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 球队信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Team")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'火箭队'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 球员信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Team")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" yaoming "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nyaoming"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 火箭队")]),t._v("\n")])])]),s("p",[t._v("看起来挺好的，球员player依赖于某个球队Team 当调用的时候主动去加载球队即可。此时的控制权在 player这⾥。")]),t._v(" "),s("p",[t._v("假如这个时候,球员发⽣交易了，球队信息更换了，转换到team2了。 这时候我们就需要去修改player里的代码了，因为球员那里直接写死了对Team的依赖，这种可扩展性是很差的。 这不是我们所想要的，需要重新思考下依赖关系处理了。 球员和球队之间非得这么直接粗暴的发生联系吗， 一个球员对应一个球队的话，未来会发生变化的可能性太大了，毕竟不止⼀个球队。 如果两者之间不直接发生联系，中间就需要⼀个中间模块来负责两者关系的处理，球员不关注球队从哪来，只要给到我就行了。 这样控制权就不是直接落在Player这里了，这正是IOC的设计思路。")]),t._v(" "),s("h3",{attrs:{id:"依据ioc进行改进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依据ioc进行改进"}},[t._v("#")]),t._v(" 依据IOC进行改进")]),t._v(" "),s("p",[t._v("参照IOC的原则，我们进行以下改进")]),t._v(" "),s("p",[t._v("1.高层模块不应该依赖于低级模块。两个都应该依赖于抽象。Player是高级模块，他依赖于球队这个低级模块，所以我们将他们解耦。Player不再直接依赖于Team这个类")]),t._v(" "),s("p",[t._v("2.抽象不应该依赖于具体实现，具体实现应该依赖于抽象。所以Player不应该直接依赖于具体的Team，而是通过构造函数将抽象的teamInfo的实例传递进去，这样就解耦具体实现。")]),t._v(" "),s("p",[t._v("上代码：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TeamInfo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("team")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" team\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ym "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TeamInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'火箭'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nym"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" kobe "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TeamInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'湖人'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nkobe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这⾥发现，TeamInfo和Player之间已经没有直接关联了，依赖关系统⼀放到getTeamInfo中。 所谓控制反转就如何上⾯一样，将依赖的控制权由player转移到其他地方即我们专门的依赖管理来做了。 这样再增加一个team3，改动也不大，复⽤就行了。 其中之间的关系，如下⾯面这个图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/blog/ioc-mult-dep.png",alt:"img"}})]),t._v(" "),s("p",[t._v("彼此不直接发生关系，依赖关系统一在中间模块管理，更加清晰。")]),t._v(" "),s("h2",{attrs:{id:"实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),s("p",[t._v("上面已经实现了最简单的IOC了，基于IOC的编程思想，实现IOC一共有2中方式：")]),t._v(" "),s("ul",[s("li",[t._v("依赖注入：常用")]),t._v(" "),s("li",[t._v("依赖查找：不常用")])]),t._v(" "),s("h3",{attrs:{id:"依赖注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入"}},[t._v("#")]),t._v(" 依赖注入")]),t._v(" "),s("p",[t._v("从名字上理解，所谓依赖注入，组件之间的依赖关系由容器在运行期间决定。即：由容器动态将某种依赖关系注入到组件之中。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("关于控制反转：")]),t._v(" "),s("ul",[s("li",[t._v("控制反转这里的是将控制权转移到第三方容器中，而不是转移到被调用者身上。")]),t._v(" "),s("li",[t._v("控制反转是一种思想，依赖注入是一种设计模式。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);