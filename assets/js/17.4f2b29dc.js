(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{445:function(t,a,s){"use strict";s.r(a);var r=s(14),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"排序算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序算法"}},[t._v("#")]),t._v(" 排序算法")]),t._v(" "),s("h2",{attrs:{id:"算法概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法概述"}},[t._v("#")]),t._v(" 算法概述")]),t._v(" "),s("h3",{attrs:{id:"_1-算法分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-算法分类"}},[t._v("#")]),t._v(" 1.算法分类")]),t._v(" "),s("p",[t._v("十种常见排序算法可以分为两大类。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("比较类排序")]),s("br"),t._v("\n通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为"),s("strong",[t._v("非线性时间比较类排序")])]),t._v(" "),s("li",[s("strong",[t._v("非比较类排序")]),s("br"),t._v("\n不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为"),s("strong",[t._v("线性时间非比较类排序")])])]),t._v(" "),s("h3",{attrs:{id:"_2-算法复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-算法复杂度"}},[t._v("#")]),t._v(" 2.算法复杂度")]),t._v(" "),s("p",[s("img",{attrs:{src:"/basic/algorithm/complexity.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"_3-相关概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-相关概念"}},[t._v("#")]),t._v(" 3.相关概念")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("稳定")]),t._v(" 如果a原本在b前面，而a=b，排序之后a仍然在b的前面。")]),t._v(" "),s("li",[s("strong",[t._v("不稳定")]),t._v(" 如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。")]),t._v(" "),s("li",[s("strong",[t._v("时间复杂度")]),t._v(" 对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。")]),t._v(" "),s("li",[s("strong",[t._v("空间复杂度")]),t._v(" 是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。")])]),t._v(" "),s("h2",{attrs:{id:"一、冒泡排序-bubble-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、冒泡排序-bubble-sort"}},[t._v("#")]),t._v(" 一、冒泡排序 - Bubble Sort")]),t._v(" "),s("p",[t._v("冒泡排序是一种简单的排序算法。它重复的走访过要排序的数列，一次比较2个元素，如果他们的顺序错误就把他们交换位置。走访数列的工作是重复的进行直到没有再需要交换，也就是说该序列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。")]),t._v(" "),s("h3",{attrs:{id:"算法描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法描述"}},[t._v("#")]),t._v(" 算法描述")]),t._v(" "),s("ul",[s("li",[t._v("比较相邻的元素。如果第一个比第二个大，就交换他们两个。")]),t._v(" "),s("li",[t._v("对每一对相邻的元素做同样的工作，从开始第一对到结尾的最后一对，这样最后的元素就是最大的数。")]),t._v(" "),s("li",[t._v("针对所有元素重复以上的步骤，除了最后一个。")]),t._v(" "),s("li",[t._v("重复1~3 ，直到排序完成")])]),t._v(" "),s("h3",{attrs:{id:"动图演示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动图演示"}},[t._v("#")]),t._v(" 动图演示")]),t._v(" "),s("p",[s("img",{attrs:{src:"/basic/algorithm/bubble-sort.gif",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bubbleSort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tmp\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"二、选择排序-selection-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、选择排序-selection-sort"}},[t._v("#")]),t._v(" 二、选择排序 - Selection Sort")]),t._v(" "),s("p",[t._v("选择排序是一种简单直观的排序算法。他的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后再从剩余排序元素中继续寻找最小（大）元素，放到已排序序列的末尾，以此类推，直到所有元素均排序完毕。")]),t._v(" "),s("h3",{attrs:{id:"算法描述-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法描述-2"}},[t._v("#")]),t._v(" 算法描述")]),t._v(" "),s("p",[t._v("n个记录的直接选择排序可经过n-1次直接选择排序得到有序结果，具体算法描述如下")]),t._v(" "),s("ul",[s("li",[t._v("初始状态：无序区为"),s("code",[t._v("R[1..n]")]),t._v(",有序区为空。")]),t._v(" "),s("li",[t._v("第i次排序"),s("code",[t._v("(i=1,2,3...n-1)")]),t._v("开始时，当前有序区和无序区分别为"),s("code",[t._v("R[1..i-1]")]),t._v(" 和 "),s("code",[t._v("R(i..n)")]),t._v("。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；")]),t._v(" "),s("li",[t._v("n-1趟结束，数组有序化了。")])]),t._v(" "),s("h3",{attrs:{id:"动图演示-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动图演示-2"}},[t._v("#")]),t._v(" 动图演示")]),t._v(" "),s("p",[s("img",{attrs:{src:"/basic/algorithm/selection-sort.gif",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"代码演示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码演示"}},[t._v("#")]),t._v(" 代码演示")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectionSort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nums")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" minNum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minNum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n       nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" minNum\n       nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp\n       minNum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"算法分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法分析"}},[t._v("#")]),t._v(" 算法分析")]),t._v(" "),s("p",[t._v("表现最稳定的排序算法之一，因为无论什么数据进去都是O(n²)的时间复杂度，所以用到他的时候，数据规模越小越好，唯一的好处可能就是不占用内存空间了吧。")]),t._v(" "),s("h2",{attrs:{id:"三、插入排序-insertion-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、插入排序-insertion-sort"}},[t._v("#")]),t._v(" 三、插入排序 - Insertion Sort")]),t._v(" "),s("p",[t._v("插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。")]),t._v(" "),s("h3",{attrs:{id:"算法描述-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法描述-3"}},[t._v("#")]),t._v(" 算法描述")]),t._v(" "),s("p",[t._v("一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下")]),t._v(" "),s("ul",[s("li",[t._v("从第一个元素开始，该元素可以认为已经被排序；")]),t._v(" "),s("li",[t._v("取出下一个元素，在已经排序的元素序列中从后向前扫描；")]),t._v(" "),s("li",[t._v("如果该元素（已排序）大于新元素，将该元素移到下一位置；")]),t._v(" "),s("li",[t._v("重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；")]),t._v(" "),s("li",[t._v("将新元素插入到该位置后；")]),t._v(" "),s("li",[t._v("重复步骤2～5")])]),t._v(" "),s("h3",{attrs:{id:"动图演示-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动图演示-3"}},[t._v("#")]),t._v(" 动图演示")]),t._v(" "),s("p",[s("img",{attrs:{src:"/basic/algorithm/insertion-sort.gif",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"代码实现-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现-2"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertionSort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"算法分析-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法分析-2"}},[t._v("#")]),t._v(" 算法分析")]),t._v(" "),s("h2",{attrs:{id:"四、希尔排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、希尔排序"}},[t._v("#")]),t._v(" 四、希尔排序")]),t._v(" "),s("h2",{attrs:{id:"五、归并排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、归并排序"}},[t._v("#")]),t._v(" 五、归并排序")]),t._v(" "),s("h2",{attrs:{id:"六、快速排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、快速排序"}},[t._v("#")]),t._v(" 六、快速排序")]),t._v(" "),s("h2",{attrs:{id:"七、堆排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、堆排序"}},[t._v("#")]),t._v(" 七、堆排序")]),t._v(" "),s("h2",{attrs:{id:"八、计数排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、计数排序"}},[t._v("#")]),t._v(" 八、计数排序")]),t._v(" "),s("h2",{attrs:{id:"九、桶排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#九、桶排序"}},[t._v("#")]),t._v(" 九、桶排序")]),t._v(" "),s("h2",{attrs:{id:"十、基数排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十、基数排序"}},[t._v("#")]),t._v(" 十、基数排序")])])}),[],!1,null,null,null);a.default=n.exports}}]);