(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{489:function(t,a,e){"use strict";e.r(a);var s=e(14),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"http协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http协议"}},[t._v("#")]),t._v(" HTTP协议")]),t._v(" "),e("ul",[e("li",[t._v("HTTP 协议是超文本传输协议，是用于从万维网服务器传输到本地浏览器的一种传输协议，网站的图片，js，css 都是基于 http 协议进行传输的。")]),t._v(" "),e("li",[t._v("HTTP协议是由从客户机到服务器的请求(Request)和从服务器到客户机 的响应(response)进行约束和规范。")])]),t._v(" "),e("h2",{attrs:{id:"http协议演变史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http协议演变史"}},[t._v("#")]),t._v(" HTTP协议演变史")]),t._v(" "),e("h3",{attrs:{id:"http-0-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-0-9"}},[t._v("#")]),t._v(" HTTP/0.9")]),t._v(" "),e("p",[t._v("最早版本是1991年发布的0.9版。该版本极其简单，只有一个命令 "),e("strong",[t._v("GET")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("GET /index.html\n")])])]),e("p",[t._v("上面的命令表示，TCP连接（connection）建立后，客户端向服务器请求（request）网页 "),e("strong",[t._v("index.html")]),t._v("。"),e("br"),t._v("\n协议规定，服务器只能回应HTML格式的字符串，不能回应别的格式。")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    Hello World!\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("服务器发送完毕，就关闭TCP连接。")]),t._v(" "),e("h3",{attrs:{id:"http-1-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0"}},[t._v("#")]),t._v(" HTTP/1.0")]),t._v(" "),e("blockquote",[e("p",[t._v("1996年5月，HTTP/1.0版本发布，内容大大增加。"),e("br"),t._v("\n首先，任何格式的内容都可以发送。这使得互联网不仅可以传输文字，还能传图像、视频、二进制文件。这位互联网的大发展奠定了基础。"),e("br"),t._v("\n其次，除了 "),e("strong",[t._v("GET")]),t._v(" 命令，还引入了 "),e("strong",[t._v("POST")]),t._v(" 命令，和 "),e("strong",[t._v("HEAD")]),t._v(" 命令， 丰富了浏览器与服务器的互动手段。"),e("br"),t._v("\n再次，HTTP请求回应的格式也变了。除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据。"),e("br"),t._v("\n其他的新增功能还包括状态码（status code），多字符集支持、多部分发送（multi-part-type）、权限（authorization）、缓存（cache）、内容编码（content encodeing）等。")])]),t._v(" "),e("h4",{attrs:{id:"请求格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求格式"}},[t._v("#")]),t._v(" 请求格式")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token request-line"}},[e("span",{pre:!0,attrs:{class:"token method property"}},[t._v("GET")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token request-target url"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token http-version property"}},[t._v("HTTP/1.0")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("User-Agent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Accept")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("*/*")])]),t._v("\n")])])]),e("p",[t._v("第一行是请求命令，必须在尾部添加协议版本（HTTP/1.0）。后面就是多行头信息，描述客户端的情况。")]),t._v(" "),e("h4",{attrs:{id:"相应格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相应格式"}},[t._v("#")]),t._v(" 相应格式")]),t._v(" "),e("p",[t._v("服务器的回应如下。")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token response-status"}},[e("span",{pre:!0,attrs:{class:"token http-version property"}},[t._v("HTTP/1.0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token status-code number"}},[t._v("200")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token reason-phrase string"}},[t._v("OK")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Content-Type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("text/plain")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Content-Length")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("137123")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Expirse")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Thu, 05 Dec 1997 16:00:00 GMT")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Last-Modified")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Wed, 5 August 1996 15:55:28 GMT")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Server")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Apache 0.84")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token text-plain"}},[t._v("\n<html>\n  <body>\n    Hello World!\n  </body>\n</html>\n")])])])]),e("p",[t._v("回应的格式是 "),e("code",[t._v("头信息 + 一个空行（\\r\\n）+ 数据")]),t._v(" 。"),e("br"),t._v("\n其中第一行是 "),e("code",[t._v("协议版本 + 状态码（status code）+ 状态描述")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),e("p",[t._v("HTTP/1.0 版的主要缺点是，每个TCP的连接只能发送一次请求。发送数据完毕后。连接就关闭了，如果好要请求其他资源，就必须在新建一个连接。")]),t._v(" "),e("p",[t._v("TCP新建连接的成本很高，因为客户端需要跟服务器进行三次握手，并且在开始时发送速率较慢（slow start）,所以HTTP/1.0版本的性能很差，随着网页加载外部资源越来越多，这个问题就愈发突出了。")]),t._v(" "),e("p",[t._v("为了解决这一问题，有些浏览器在请求时，用了一个非标准的 "),e("code",[t._v("Connection")]),t._v(" 字段。")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Connection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("keep-alive")])]),t._v("\n")])])]),e("p",[t._v("这个字段要求服务器不要关闭TCP连接，以便其他请求复用。服务器同样回应这个字段")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Connection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("keep-alive")])]),t._v("\n")])])]),e("p",[t._v("一个可复用的TCP连接就建立了，直到客户端或服务器主动关闭连接。")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("在HTTP/1.0中")]),t._v(" "),e("p",[t._v("这是不标准的，不同实现的行为可能不一致，因此不是根本的解决方法")])]),t._v(" "),e("h3",{attrs:{id:"http-1-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1"}},[t._v("#")]),t._v(" HTTP/1.1")]),t._v(" "),e("blockquote",[e("p",[t._v("1997年1月，HTTP/1.1 版本发布，只比 1.0 版本晚了半年。它进一步完善了 HTTP 协议，一直用到了20多年后的今天，直到现在还是最流行的版本。")])]),t._v(" "),e("h4",{attrs:{id:"持久连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#持久连接"}},[t._v("#")]),t._v(" 持久连接")]),t._v(" "),e("p",[t._v("HTTP/1.1 版本的最大变化，就是引入了持久连接（persistent connection），即TCP默认不关闭，可以被多个请求复用，不用声明 "),e("code",[t._v("Content-Length:keep-alive")]),t._v("。")]),t._v(" "),e("p",[t._v("客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接，不过，规范的做法是，客户端在最后一个请求时发送 "),e("code",[t._v("Contention: close")]),t._v(" ,明确要求服务器关闭TCP连接。")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Contention")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("close")])]),t._v("\n")])])]),e("p",[t._v("目前，对于同一个域名，大多数浏览器允许同时建立6个持久连接。")]),t._v(" "),e("h4",{attrs:{id:"管道机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管道机制"}},[t._v("#")]),t._v(" 管道机制")]),t._v(" "),e("p",[t._v("HTTP/1.1 版本还引入了管道机制（pipelining），即在同一个TCP连接中，客户端可以同时发送多个请求，这样就进一步改进了 HTTP协议的效率。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("举例说明")]),t._v(" "),e("p",[t._v("客户端要请求两个资源，以前的做法是，在同一个TCP连接里面，先发送A请求，等待服务器完成响应后，在发送B请求。"),e("strong",[t._v("管道机制")]),t._v(" 是允许客户端同时发起A请求和B请求，但是服务器还是按照顺序，先回应A请求，完成后再回应B请求。")])]),t._v(" "),e("h4",{attrs:{id:"content-length字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#content-length字段"}},[t._v("#")]),t._v(" Content-Length字段")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("Content-Length")]),t._v(" 字段的前提条件是，服务器发送回应之前，必须知道回应的数据长度。")]),t._v(" "),e("p",[t._v("对于一些很耗时的动态操作来说，这意味着，服务器要等所有操作完成，才能发送数据，显然这样效率不高。更好的方法是，产生一块数据，就发送一块，采用 "),e("code",[t._v("流模式(stream)")]),t._v(" 取代 "),e("code",[t._v("缓存模式(buffer)")]),t._v("。")]),t._v(" "),e("p",[t._v("因此HTTP/1.1 版本规定可以不使用 "),e("code",[t._v("Content-Length")]),t._v(" 字段，而使用 "),e("code",[t._v("分块编码传输（chunked transfer encoding）")]),t._v(" 只要请求或回应的头信息有 "),e("code",[t._v("Transfer-Encoding")]),t._v(" 字段，就表明回应将由数量未定的数据块组成。")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Transfer-Encoding")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("chunked")])]),t._v("\n")])])]),e("p",[t._v("每个非空的数据块之前，会有一个16进制的数值，表示这个块的长度。最后是一个大小为0的块，就表示本次回应的数据发送完了。下面是一个例子。")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token response-status"}},[e("span",{pre:!0,attrs:{class:"token http-version property"}},[t._v("HTTP/1.1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token status-code number"}},[t._v("200")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token reason-phrase string"}},[t._v("OK")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Content-Type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("text/plain")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Transfer-Encoding")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("chunked")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token text-plain"}},[t._v("\n25\nThis is the data in the first chunk\n\n1C\nand this is the second one\n\n3\ncon\n\n8\nsequence\n\n0\n")])])])]),e("h4",{attrs:{id:"其他功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他功能"}},[t._v("#")]),t._v(" 其他功能")]),t._v(" "),e("p",[t._v("HTTP/1.1 还新增了许多动词方法："),e("code",[t._v("PUT")]),t._v(" "),e("code",[t._v("PATCH")]),t._v(" "),e("code",[t._v("HEAD")]),t._v(" "),e("code",[t._v("OPTIONS")]),t._v(" "),e("code",[t._v("DELETE")])]),t._v(" "),e("p",[t._v("客户端请求头新增 "),e("code",[t._v("HOST")]),t._v(" 字段，用来指定服务器的域名。")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("HOST")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("www.example.com")])]),t._v("\n")])])]),e("p",[t._v("有了 "),e("code",[t._v("HOST")]),t._v(" 字段，就可以将请求发往同一台服务器上的不同网站，为虚拟机的兴起打下了基础。")]),t._v(" "),e("h4",{attrs:{id:"缺点-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),e("p",[e("strong",[t._v("队头阻塞（Head-of-line blocking）:")]),t._v(" 虽然允许复用TCP连接，但是在同一个TCP连接中，所有数据通信都是按次序进行的，服务器只能处理完一个回应，才会进行下一个回应，要是前面的回应特别慢，后面就会有很多请求排队等着。")]),t._v(" "),e("p",[t._v("为了避免这个问题，只有两种方法：")]),t._v(" "),e("ul",[e("li",[t._v("减少请求数")]),t._v(" "),e("li",[t._v("同时多开持久连接\n这导致了很多的网页优化技巧，比如合并脚本和样式表、将图片嵌入CSS代码、域名分片（domain sharding）等等。")])]),t._v(" "),e("h3",{attrs:{id:"spdy协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spdy协议"}},[t._v("#")]),t._v(" SPDY协议")]),t._v(" "),e("blockquote",[e("p",[t._v("2009年，谷歌公开了自行研发的 SPDY 协议，主要解决 HTTP/1.1 效率不高的问题。"),e("br"),t._v("\n这个协议在Chrome浏览器上证明可行以后，就被当作 HTTP/2 的基础，主要特性都在 HTTP/2 之中得到继承。")])]),t._v(" "),e("h3",{attrs:{id:"http-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" HTTP/2")]),t._v(" "),e("blockquote",[e("p",[t._v("2015年，HTTP/2发布，他不叫 HTTP/2.0,  是因为标准委员会不打算在发布子版本了，下一个新版本将是HTTP/3")])]),t._v(" "),e("h4",{attrs:{id:"二进制协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二进制协议"}},[t._v("#")]),t._v(" 二进制协议")]),t._v(" "),e("p",[t._v('HTTP/1.1 版的头信息肯定是文本（ASCII编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为"帧"（frame）：头信息帧和数据帧。')]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("二进制协议的好处")]),t._v(" "),e("p",[t._v("可以定义额外的帧。HTTP/2 定义了近十种帧，为将来的高级应用打好了基础。如果使用文本实现这种功能，解析数据将会变得非常麻烦，二进制解析则方便得多。")])]),t._v(" "),e("h4",{attrs:{id:"多工-多路复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多工-多路复用"}},[t._v("#")]),t._v(" 多工（多路复用）")]),t._v(" "),e("p",[t._v('HTTP/2 复用TCP连接，在一个连中，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了"队头堵塞"。')]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("举例来说")]),t._v(" "),e("p",[t._v("在一个TCP连接中，服务器同时收到了A请求和B请求，于是先回应A请求，结果发现处理过程非常耗时，于是就发送A请求已经处理好的部分， 接着回应B请求，完成后，再发送A请求剩下的部分。")])]),t._v(" "),e("p",[t._v("这样双向的、实时的通信，就叫做多工（Multiplexing）。")]),t._v(" "),e("h4",{attrs:{id:"数据流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据流"}},[t._v("#")]),t._v(" 数据流")]),t._v(" "),e("p",[t._v("因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。")]),t._v(" "),e("p",[t._v("HTTP/2 将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流ID，用来区分它属于哪个数据流。另外还规定，客户端发出的数据流，ID一律为奇数，服务器发出的，ID为偶数。")]),t._v(" "),e("p",[t._v("数据流发送到一半的时候，客户端和服务器都可以发送信号 "),e("strong",[e("code",[t._v("RST_STREAM帧")])]),t._v(" ，取消这个数据流。")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("HTTP/1.1版取消数据流的唯一方法，就是关闭TCP连接。这就是说，HTTP/2 可以取消某一次请求，同时保证TCP连接还打开着，可以被其他请求使用。")])]),t._v(" "),e("p",[t._v("客户端还可以指定数据流的优先级。优先级越高，服务器就会越早回应。")]),t._v(" "),e("h4",{attrs:{id:"头信息压缩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#头信息压缩"}},[t._v("#")]),t._v(" 头信息压缩")]),t._v(" "),e("p",[t._v("HTTP 协议不带有状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 "),e("code",[t._v("Cookie")]),t._v(" 和 "),e("code",[t._v("User Agent")]),t._v(" ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。")]),t._v(" "),e("p",[t._v("HTTP/2 对这一点做了优化，引入了头信息压缩机制（header compression）。一方面，头信息使用 "),e("code",[t._v("gzip")]),t._v(" 或 "),e("code",[t._v("compress")]),t._v(" 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了。")]),t._v(" "),e("h4",{attrs:{id:"服务器推送"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[t._v("#")]),t._v(" 服务器推送")]),t._v(" "),e("p",[t._v("HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。")]),t._v(" "),e("p",[t._v("常见场景是客户端请求一个网页，这个网页里面包含很多静态资源。正常情况下，客户端必须收到网页后，解析HTML源码，发现有静态资源，再发出静态资源请求。其实，服务器可以预期到客户端请求网页后，很可能会再请求静态资源，所以就主动把这些静态资源随着网页一起发给客户端了。")]),t._v(" "),e("h2",{attrs:{id:"http的请求与响应"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http的请求与响应"}},[t._v("#")]),t._v(" HTTP的请求与响应")]),t._v(" "),e("h3",{attrs:{id:"请求方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求方法"}},[t._v("#")]),t._v(" 请求方法")]),t._v(" "),e("p",[e("code",[t._v("GET")]),t._v(" 请求获取Request-URI所标识的资源"),e("br"),t._v(" "),e("code",[t._v("POST")]),t._v(" 在Request-URI所标识的资源后附加新的数据"),e("br"),t._v(" "),e("code",[t._v("HEAD")]),t._v(" 请求获取由Request-URI所标识的资源的响应消息报头"),e("br"),t._v(" "),e("code",[t._v("PUT")]),t._v(" 请求服务器存储一个资源，并用Request-URI作为其标识"),e("br"),t._v(" "),e("code",[t._v("DELETE")]),t._v(" 请求服务器删除Request-URI所标识的资源"),e("br"),t._v(" "),e("code",[t._v("TRACE")]),t._v(" 请求服务器回送收到的请求信息，主要用于测试或诊断"),e("br"),t._v(" "),e("code",[t._v("CONNECT")]),t._v(" HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。"),e("br"),t._v(" "),e("code",[t._v("OPTIONS")]),t._v(" 请求查询服务器的性能，或者查询与资源相关的选项和需求")]),t._v(" "),e("h3",{attrs:{id:"请求报头"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求报头"}},[t._v("#")]),t._v(" 请求报头")]),t._v(" "),e("p",[t._v("Accept 请求报头域用于指定客户端接受哪些类型的信息。eg:Accept:image/gif，Accept:text/ html。"),e("br"),t._v("\nAccept-Charset 请求报头域用于指定客户端接受的字符集。"),e("br"),t._v("\nAccept-Encoding:Accept-Encoding 请求 报头域类似于 Accept，但是它是用于指定可接受的内容编码。"),e("br"),t._v("\nAccept-Language 请求报头域类似于 Accept，但是它是用于指定一种自然语言。"),e("br"),t._v("\nAuthorization 请求报头域主要用于证明客户端有权查看某个资源。当浏览器访问一个页面时，如果收 到服务器的响应代码为 401(未授权)，可以发送一个包含 Authorization 请求报头域的请求，要求服务 器对其进行验证。"),e("br"),t._v("\nHost 请求报头域主要用于指定被请求资源的 Internet 主机和端又号，它通常从 HTTP URL 中提取出来 的，发送请求时，该报头域是必需的。"),e("br"),t._v("\nUser-Agent 请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。")]),t._v(" "),e("h2",{attrs:{id:"http状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" HTTP状态码")]),t._v(" "),e("p",[t._v("HTTP状态码的英文为HTTP Status Code。")]),t._v(" "),e("h3",{attrs:{id:"常见的状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见的状态码"}},[t._v("#")]),t._v(" 常见的状态码：")]),t._v(" "),e("ul",[e("li",[t._v("200 - 请求成功")]),t._v(" "),e("li",[t._v("301 - 资源（网页等）被永久转移到其它URL")]),t._v(" "),e("li",[t._v("404 - 请求的资源（网页等）不存在")]),t._v(" "),e("li",[t._v("500 - 内部服务器错误")])]),t._v(" "),e("h3",{attrs:{id:"状态码分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态码分类"}},[t._v("#")]),t._v(" 状态码分类")]),t._v(" "),e("p",[t._v("HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("分类")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("1**")]),t._v(" "),e("td",[t._v("信息，服务器收到请求，需要请求者继续执行操作")])]),t._v(" "),e("tr",[e("td",[t._v("2**")]),t._v(" "),e("td",[t._v("成功，操作被成功接收并处理")])]),t._v(" "),e("tr",[e("td",[t._v("3**")]),t._v(" "),e("td",[t._v("重定向，需要进一步的操作以完成请求")])]),t._v(" "),e("tr",[e("td",[t._v("4**")]),t._v(" "),e("td",[t._v("客户端错误，请求包含语法错误或无法完成请求")])]),t._v(" "),e("tr",[e("td",[t._v("5**")]),t._v(" "),e("td",[t._v("服务器错误，服务器在处理请求的过程中发生了错误")])])])]),t._v(" "),e("h3",{attrs:{id:"状态码列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态码列表"}},[t._v("#")]),t._v(" 状态码列表")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("p",{staticStyle:{"min-width":"50px","text-align":"center"}},[t._v("状态码")])]),t._v(" "),e("th",[e("p",{staticStyle:{"min-width":"120px"}},[t._v("状态码英文描述")])]),t._v(" "),e("th",[t._v("中文描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("200")]),t._v(" "),e("td",[t._v("OK")]),t._v(" "),e("td",[t._v("请求成功。一般用于GET与POST请求")])]),t._v(" "),e("tr",[e("td",[t._v("201")]),t._v(" "),e("td",[t._v("Created")]),t._v(" "),e("td",[t._v("已创建。成功请求并创建了新的资源")])]),t._v(" "),e("tr",[e("td",[t._v("202")]),t._v(" "),e("td",[t._v("Accepted")]),t._v(" "),e("td",[t._v("已接受。已经接受请求，但未处理完成")])]),t._v(" "),e("tr",[e("td",[t._v("203")]),t._v(" "),e("td",[t._v("Non-Authoritative Information")]),t._v(" "),e("td",[t._v("非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本")])]),t._v(" "),e("tr",[e("td",[t._v("204")]),t._v(" "),e("td",[t._v("No Content")]),t._v(" "),e("td",[t._v("无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档")])]),t._v(" "),e("tr",[e("td",[t._v("205")]),t._v(" "),e("td",[t._v("Reset Content")]),t._v(" "),e("td",[t._v("重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域")])]),t._v(" "),e("tr",[e("td",[t._v("206")]),t._v(" "),e("td",[t._v("Partial Content")]),t._v(" "),e("td",[t._v("部分内容。服务器成功处理了部分GET请求")])]),t._v(" "),e("tr",[e("td",[t._v("301")]),t._v(" "),e("td",[t._v("Multiple Choices")]),t._v(" "),e("td",[t._v("永久重定向(nginx  配置 rewrite permanent 就是这个效果)")])]),t._v(" "),e("tr",[e("td",[t._v("302")]),t._v(" "),e("td",[t._v("Found")]),t._v(" "),e("td",[t._v("临时重定向")])]),t._v(" "),e("tr",[e("td",[t._v("303")]),t._v(" "),e("td",[t._v("See Other")]),t._v(" "),e("td",[t._v("与301类似。使用GET和POST请求查看")])]),t._v(" "),e("tr",[e("td",[t._v("304")]),t._v(" "),e("td",[t._v("Bad Request")]),t._v(" "),e("td",[t._v("未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源（etag / if-none-match 、last-modified / if-modified-since）")])]),t._v(" "),e("tr",[e("td",[t._v("307")]),t._v(" "),e("td",[t._v("Temporary Redirect")]),t._v(" "),e("td",[t._v("临时重定向。与302类似。使用GET请求重定向")])]),t._v(" "),e("tr",[e("td",[t._v("305")]),t._v(" "),e("td",[t._v("Use Proxy")]),t._v(" "),e("td",[t._v("使用代理。所请求的资源必须通过代理访问")])]),t._v(" "),e("tr",[e("td",[t._v("400")]),t._v(" "),e("td",[t._v("Bad Request")]),t._v(" "),e("td",[t._v("客户端请求的语法错误，服务器无法理解")])]),t._v(" "),e("tr",[e("td",[t._v("401")]),t._v(" "),e("td",[t._v("Unauthorized")]),t._v(" "),e("td",[t._v("请求要求用户的身份认证（例如：未登录）")])]),t._v(" "),e("tr",[e("td",[t._v("402")]),t._v(" "),e("td",[t._v("Payment Required")]),t._v(" "),e("td",[t._v("保留，将来使用")])]),t._v(" "),e("tr",[e("td",[t._v("403")]),t._v(" "),e("td",[t._v("Forbidden")]),t._v(" "),e("td",[t._v("服务器理解请求客户端的请求，但是拒绝执行此请求（未授权，没权限）")])]),t._v(" "),e("tr",[e("td",[t._v("404")]),t._v(" "),e("td",[t._v("Not Found")]),t._v(" "),e("td",[t._v("未找到资源")])]),t._v(" "),e("tr",[e("td",[t._v("405")]),t._v(" "),e("td",[t._v("Method Not Allowed")]),t._v(" "),e("td",[t._v("客户端请求中的方法被禁止（允许使用此方法请求）")])]),t._v(" "),e("tr",[e("td",[t._v("500")]),t._v(" "),e("td",[t._v("Internal Server Error")]),t._v(" "),e("td",[t._v("服务器内部错误，无法完成请求")])]),t._v(" "),e("tr",[e("td",[t._v("501")]),t._v(" "),e("td",[t._v("Not Implemented")]),t._v(" "),e("td",[t._v("服务器不支持请求的功能，无法完成请求")])]),t._v(" "),e("tr",[e("td",[t._v("502")]),t._v(" "),e("td",[t._v("Bad Gateway")]),t._v(" "),e("td",[t._v("作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应")])]),t._v(" "),e("tr",[e("td",[t._v("503")]),t._v(" "),e("td",[t._v("Service Unavailable")]),t._v(" "),e("td",[t._v("由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中")])]),t._v(" "),e("tr",[e("td",[t._v("504")]),t._v(" "),e("td",[t._v("Gateway Time-out")]),t._v(" "),e("td",[t._v("请求超时")])]),t._v(" "),e("tr",[e("td",[t._v("505")]),t._v(" "),e("td",[t._v("HTTP Version not supported")]),t._v(" "),e("td",[t._v("服务器不支持此HTTP协议版本，无法完成处理")])])])]),t._v(" "),e("h2",{attrs:{id:"相关连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关连接"}},[t._v("#")]),t._v(" 相关连接")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/08/http.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 协议入门"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=v.exports}}]);